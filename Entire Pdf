
Practical 1 - Displaying different LED patterns with Raspberry Pi.
// C++ code
//
int animationSpeed = 0;
void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(11, OUTPUT);
}
void loop()
{
  animationSpeed = 400;
  digitalWrite(LED_BUILTIN, HIGH);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
  digitalWrite(LED_BUILTIN, LOW);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
  digitalWrite(12, HIGH);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
  digitalWrite(12, LOW);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
  digitalWrite(11, HIGH);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
  digitalWrite(11, LOW);
  delay(animationSpeed); // Wait for animationSpeed millisecond(s)
}




Practical 2 - Displaying Time over 4-Digit 7-Segment Display using Raspberry Pi
void setup()
{
  pinMode(2,OUTPUT);
  pinMode(3,OUTPUT);
  pinMode(4,OUTPUT);
  pinMode(5,OUTPUT);
  pinMode(6,OUTPUT);
  pinMode(7,OUTPUT);
  pinMode(8,OUTPUT);
  pinMode(9,OUTPUT);
}
void loop()
{
  digitalWrite(2,HIGH);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);    // 0
  digitalWrite(7,HIGH);
  digitalWrite(8,HIGH);
  digitalWrite(9,LOW);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,LOW);
  digitalWrite(4,HIGH);
  digitalWrite(5,LOW);
  digitalWrite(6,HIGH);   	 // 1
  digitalWrite(7,LOW);
  digitalWrite(8,LOW);
  digitalWrite(9,LOW);
  delay(1000);
  digitalWrite(2,HIGH);
  digitalWrite(3,HIGH);
  digitalWrite(4,LOW);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 2
  digitalWrite(7,HIGH);
  digitalWrite(8,LOW);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 3
  digitalWrite(7,HIGH);
  digitalWrite(8,LOW);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,LOW);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 4
  digitalWrite(7,LOW);
  digitalWrite(8,HIGH);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,LOW);		 // 5
  digitalWrite(7,HIGH);
  digitalWrite(8,HIGH);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,HIGH);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,LOW);		 // 6
  digitalWrite(7,HIGH);
  digitalWrite(8,HIGH);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,LOW);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 7
  digitalWrite(7,HIGH);
  digitalWrite(8,LOW);
  digitalWrite(9,LOW);
  delay(1000);
  digitalWrite(2,HIGH);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 8
  digitalWrite(7,HIGH);
  digitalWrite(8,HIGH);
  digitalWrite(9,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  digitalWrite(3,HIGH);
  digitalWrite(4,HIGH);
  digitalWrite(5,HIGH);
  digitalWrite(6,HIGH);		 // 9
  digitalWrite(7,HIGH);
  digitalWrite(8,HIGH);
  digitalWrite(9,HIGH);
  delay(1000);
}

Practical 3 â€“ Raspberry Pi Based Oscilloscope
// C++ code
//
void setup()
{
pinMode(7, OUTPUT);
}



void loop()
{
digitalWrite(7, HIGH);
delay(1000); // Wait for 1000 millisecond(s)
digitalWrite(7, HIGH);
delay(1000); // Wait for 1000 millisecond(s)
}

Practicall 4 -Raspberry Pi GPS Module Interfacing
#include <LiquidCrystal.h>

#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))

float stepADC = 0.0048828125;

LiquidCrystal lcd1(5, 4, 3, 13, 2, 6);
LiquidCrystal lcd2(12, 11, 10, 9, 8, 7);

char sSecventa[119];

//declarate global deoarece in cazul calculatiilor din ecranul 2 
//memoria este deja scrisa si ar fi trebuit o alta initializare
//cu mai multe varibile, etc..
static char *aValori[2];
static char *token;
static char *aValori1[9];
static char *token1;
static char *aValori2[15];
static char *token2;

int contor = 0;
bool ecran = 0;
bool stareButon = 0;
bool stareButonAnterioara = 0;
//---------------------

unsigned int citesteADC(unsigned int adc_input)
{
  ADMUX = adc_input | ADC_VREF_TYPE;
  
  //delay necesar pentru stabilirea ADC pt tens 
  //de intrare analogica
  delayMicroseconds(10);
  
  //start conversie
  ADCSRA |= (1<<ADSC);
  //Asteptare finalizare conversie
  while ((ADCSRA & (1<<ADIF))==0){}
  ADCSRA |= (1<<ADIF);
  
  //returnare rezultat pe 16 bitia
  return ADCW;
}

//cod recunoastere/segmentare secventa
void segmentareSecventa()
{
  //segmentare secventa principala
  token = strtok(sSecventa, "/");
  static int increment = 0;
  while (token != NULL) 
  {
    aValori[increment++] = token;
    
    token = strtok(NULL, "/");
  }
  
  //segmentare secventa 1
  token1 = strtok(aValori[0], ",");
  static int increment1 = 0;
  while (token1 != NULL) 
  {
    aValori1[increment1++] = token1;
    
    token1 = strtok(NULL, ",");
  }

  //segmentare secventa 2
  token2 = strtok(aValori[1], ",");
  static int increment2 = 0;
  while (token2 != NULL) 
  {
    aValori2[increment2++] = token2;
    
    token2 = strtok(NULL, ",");
  }

  //incheiere segmentare secvente -------------
}

void ecranulUnu()
{
  //afisare viteza
  static float iViteza = 0;
  if (strcmp(aValori1[0], "$GPVTG") == 0) 
  {
    iViteza = atof(aValori1[7]);      
  }
    //setare cursor: coloana 0, linia 1
  lcd1.setCursor(0, 1);
  lcd1.print("Vit: ");
  lcd1.print(iViteza);
  lcd1.print("km/h");
  
  //afisare timp
  static long int temp[4];
  static int iSateliti = 0;
  if (strcmp(aValori2[0], "$GPGGA") == 0) 
  {
	//stocare sir
	temp[0] = atof(aValori2[1]);
	//stocare secunde
	temp[3] = temp[0] % 100;
	temp[0] = temp[0] / 100;
	//stocare minute
	temp[2] = temp[0] % 100;
	temp[0] = temp[0] / 100;
	//stocare ore
	temp[1] = temp[0];
    
    iSateliti = atoi(aValori2[7]);
  }
  
  //setare cursor: coloana 0, linia 0
  lcd1.setCursor(0, 0);
  lcd1.print("Timp: ");
  lcd1.print(temp[1]);
  lcd1.print(":");
  lcd1.print(temp[2]);
  lcd1.print(":");
  lcd1.print(temp[3]);
  
  
  //setare cursor: coloana 0, linia 3
  lcd2.setCursor(0,0);
  lcd2.print("Nr. sat: ");
  lcd2.print(iSateliti);
  
  //citire termometru de pe pinul analogic "0"
  unsigned int sensorValue = citesteADC(0);
  //calculare temperatura in functie de valorile din datasheetul termometrului
  float fTemperature = (stepADC*sensorValue-0.5)*100;
    
  //setare cursor: coloana 0, linia 3
  lcd2.setCursor(0, 1);
  lcd2.print("Temp: ");
  lcd2.print(fTemperature, 2);
  lcd2.print(" C");
  //incheiere prelucrare ecran unu--------
}

//afisare/selectare date pe ecranul doi
void ecranulDoi()
{
  //segmentareSecventa();
  //calculare, afisare latitudine
  static float fLatitudine = 0;
  static float fLongitudine = 0; 
  static float fAltitudine = 0;
  if (strcmp(aValori2[0], "$GPGGA") == 0) 
  {
    fLatitudine = atof(aValori2[2]);
    fLongitudine = atof(aValori2[4]);
    fAltitudine = atof(aValori2[9]) - atof(aValori2[11]);
  }
  //afisare date
  //setare cursor: coloana 0, linia 1
  lcd1.setCursor(0, 1);
  lcd1.print("Lat: ");
  lcd1.print((int)fLatitudine/100+((int)(fLatitudine)%100+(fLatitudine-(int)(fLatitudine)))/60);
  lcd1.print(aValori2[3]);
  //setare cursor: coloana 0, linia 2
  lcd2.setCursor(0, 0);
  lcd2.print("Long: ");
  lcd2.print((int)fLongitudine/100+((int)(fLongitudine)%100+(fLongitudine-(int)(fLongitudine)))/60);
  lcd2.print(aValori2[5]);
  //setare cursor: coloana 0, linia 3
  lcd2.setCursor(0, 1);
  lcd2.print("Alt: ");
  lcd2.print(fAltitudine);
  lcd2.print("m");
  //incheiere prelucrare ecran doi--------
}

//---------------------
// -------SETUP--------
//---------------------
void setup()
{
  Serial.begin(9600);
  
  lcd1.begin(2,16);
  lcd2.begin(2,16);  
}

//---------------------
// -------LOOP---------
//---------------------
void loop()
{
  if(contor < 1)
  {
    Serial.readBytes(sSecventa, 119);
    Serial.println(sSecventa);
    segmentareSecventa();
    contor++;
  }
  
  //citire stare buton 
  /*stareButon = (PIND & (1 << PIND2));
  
  if(stareButon != stareButonAnterioara)
  {
    delay(200);
    ecran = !ecran;
    
    if( stareButon == 0)
    {
      stareButon = !stareButon;
    }
  }
  stareButonAnterioara = stareButon;
  
*/
  
    ecranulUnu();
    delay(1000);
    lcd1.clear();
   	lcd2.clear();
   
  	ecranulDoi();
    delay(1000);
    lcd1.clear();
   	lcd2.clear();

}

Practical 5 - Visitor Monitoring with Raspberry Pi and Pi Camera
#include <Keypad.h>
#include <LiquidCrystal.h>
#include <Servo.h>
Servo myservo;
int pos=0; // LCD Connections
LiquidCrystal lcd(A0,A1,A2,A3,A4,A5);
const byte rows=4;
const byte cols=3;
char key[rows][cols]={
{'1','2','3'},
{'4','5','6'},
{'7','8','9'},
{'*','0','#'}
};
byte rowPins[rows]={1,2,3,4};
byte colPins[cols]={5,6,7};
Keypad keypad= Keypad(makeKeymap(key),rowPins,colPins,rows,cols);
char* password="4567";
int currentposition=0;
int redled=10;
int greenled=11;
int buzz=8;
int invalidcount=12;
void setup()
{
displayscreen();
Serial.begin(9600);
pinMode(redled, OUTPUT);
pinMode(greenled, OUTPUT);
pinMode(buzz, OUTPUT);
myservo.attach(9); //SERVO ATTACHED//
lcd.begin(16,2);
}
void loop()
{
if( currentposition==0)
{
displayscreen();
}
int l ;
char code=keypad.getKey();
if(code!=NO_KEY)
{
lcd.clear();
lcd.setCursor(0,0);
lcd.print("PASSWORD:");
lcd.setCursor(7,1);
lcd.print(" ");
lcd.setCursor(7,1);
for(l=0;l<=currentposition;++l)
{
lcd.print("*");
keypress();
}
if (code==password[currentposition])
{
++currentposition;
if(currentposition==4)
{
unlockdoor();
currentposition=0;
}
}
else
{
++invalidcount;
incorrect();
currentposition=0;
}
if(invalidcount==5)
{
++invalidcount;
torture1();
}
if(invalidcount==8)
{
torture2();
}
}
// LOOP ENDS!!!//
}
//*OPEN THE DOOR FUNCTION!!!!*//
void unlockdoor()
{
delay(900);
lcd.setCursor(0,0);
lcd.println(" ");
lcd.setCursor(1,0);
lcd.print("Access Granted");
lcd.setCursor(4,1);
lcd.println("WELCOME!!");
lcd.setCursor(15,1);
lcd.println(" ");
lcd.setCursor(16,1);
lcd.println(" ");
lcd.setCursor(14,1);
lcd.println(" ");
lcd.setCursor(13,1);
lcd.println(" ");
unlockbuzz();
for(pos = 180; pos>=0; pos-=5) // goes from 180 degrees to 0 degrees
{
myservo.write(pos); // tell servo to go to position in variable 'pos'
delay(5); // waits 15ms for the servo to reach the position
}
delay(2000);
delay(1000);
counterbeep();
delay(1000);
for(pos = 0; pos <= 180; pos +=5) // goes from 0 degrees to 180 degrees
{ // in steps of 1 degree
myservo.write(pos); // tell servo to go to position in variable 'pos'
delay(15);
currentposition=0;
lcd.clear();
displayscreen();
}
}
//*WRONG CODE FUNCTION*//
void incorrect()
{
delay(500);
lcd.clear();
lcd.setCursor(1,0);
lcd.print("CODE");
lcd.setCursor(6,0);
lcd.print("INCORRECT");
lcd.setCursor(15,1);
lcd.println(" ");
lcd.setCursor(4,1);
lcd.println("GET AWAY!!!");
lcd.setCursor(13,1);
lcd.println(" ");
Serial.println("CODE INCORRECT YOU ARE UNAUTHORIZED");
digitalWrite(redled, HIGH);
digitalWrite(buzz, HIGH);
delay(3000);
lcd.clear();
digitalWrite(redled, LOW);
digitalWrite(buzz,LOW);
displayscreen();
}
//*CLEAR THE SCREEN!!!*//
void clearscreen()
{
lcd.setCursor(0,0);
lcd.println(" ");
lcd.setCursor(0,1);
lcd.println(" ");
lcd.setCursor(0,2);
lcd.println(" ");
lcd.setCursor(0,3);
lcd.println(" ");
}
//*KEYPRESS**//
void keypress()
{
digitalWrite(buzz, HIGH);
delay(50);
digitalWrite(buzz, LOW);
}
//*DISPALAY FUNCTION!!!*//
void displayscreen()
{
lcd.setCursor(0,0);
lcd.println("*ENTER THE CODE*");
lcd.setCursor(1 ,1);
lcd.println("TO _/_ (OPEN)!!");
}
//*ARM SERVO*//
void armservo()
{
for (pos=180;pos<=180;pos+=50)
{
myservo.write(pos);
delay(5);
}
delay(5000);
for(pos=180;pos>=0;pos-=50)
{
myservo.write(pos);
}
}
//*UNLOCK BUZZ*//
void unlockbuzz()
{
digitalWrite(buzz, HIGH);
delay(80);
digitalWrite(buzz, LOW);
delay(80);
digitalWrite(buzz, HIGH);
delay(80);
digitalWrite(buzz, LOW);
delay(200);
digitalWrite(buzz, HIGH);
delay(80);
digitalWrite(buzz, LOW);
delay(80);
digitalWrite(buzz, HIGH);
delay(80);
digitalWrite(buzz, LOW);
delay(80);
}
//*COUNTER BEEP*//
void counterbeep()
{
delay(1200);
lcd.clear();
digitalWrite(buzz, HIGH);
lcd.setCursor(2,15);
lcd.println(" ");
lcd.setCursor(2,14);
lcd.println(" ");
lcd.setCursor(2,0);
delay(200);
lcd.println("GET IN WITHIN:::");
lcd.setCursor(4,1);
lcd.print("5");
delay(200);
lcd.clear();
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
digitalWrite(buzz,LOW);
delay(1000);
//2
digitalWrite(buzz, HIGH);
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
lcd.setCursor(4,1); //2
lcd.print("4");
delay(100);
lcd.clear();
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
digitalWrite(buzz,LOW);
delay(1000);
//3
digitalWrite(buzz, HIGH);
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
lcd.setCursor(4,1); //3
lcd.print("3");
delay(100);
lcd.clear();
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
digitalWrite(buzz,LOW);
delay(1000);
//4
digitalWrite(buzz, HIGH);
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
lcd.setCursor(4,1); //4
lcd.print("2");
delay(100);
lcd.clear();
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN:");
digitalWrite(buzz,LOW);
delay(1000);
//
digitalWrite(buzz, HIGH);
lcd.setCursor(4,1);
lcd.print("1");
delay(100);
lcd.clear();
lcd.setCursor(2,0);
lcd.println("GET IN WITHIN::");
digitalWrite(buzz,LOW);
delay(1000);
//5
digitalWrite(buzz, HIGH);
delay(40);
digitalWrite(buzz,LOW);
delay(40);
digitalWrite(buzz, HIGH);
delay(40);
digitalWrite(buzz,LOW);
delay(40);
digitalWrite(buzz, HIGH);
delay(40);
digitalWrite(buzz,LOW);
delay(40);
digitalWrite(buzz, HIGH);
delay(40);
digitalWrite(buzz,LOW);
lcd.clear();
lcd.setCursor(2,0);
lcd.print("RE-LOCKING");
delay(500);
lcd.setCursor(12,0);
lcd.print(".");
delay(500);
lcd.setCursor(13,0);
lcd.print(".");
delay(500);
lcd.setCursor(14,0);
lcd.print(".");
delay(400);
lcd.clear();
lcd.setCursor(4,0);
lcd.print("LOCKED!");
delay(440);
}
//*TORTURE1*//
void torture1()
{
delay(1000);
lcd.clear();
lcd.setCursor(2,0);
lcd.print("WAIT FOR ");
lcd.setCursor(5,1);
lcd.print("15 SECONDS");
digitalWrite(buzz, HIGH);
delay(15000);
digitalWrite(buzz, LOW);
lcd.clear();
lcd.setCursor(2,0);
lcd.print("LOL..");
lcd.setCursor(1,1);
lcd.print(" HOW WAS THAT??");
delay(3500);
lcd.clear();
}
//*TORTURE2*//
void torture2()
{
delay(1000);
lcd.setCursor(1,0);
lcd.print(" ");
lcd.setCursor(2,0);
lcd.print("EAR DRUMS ARE");
lcd.setCursor(0,1);
lcd.print(" PRECIOUS!! ");
delay(1500);
lcd.clear();
lcd.setCursor(1,0);
lcd.print(" WAIT FOR");
lcd.setCursor(4,1);
lcd.print(" 1 MINUTE");
digitalWrite(buzz, HIGH);
delay(55000);
counterbeep();
lcd.clear();
digitalWrite(buzz, LOW);
lcd.setCursor(2,0);
lcd.print("WANT ME TO");
lcd.setCursor(1,1);
lcd.print("REDICULE MORE??");
delay(2500);
lcd.clear();
lcd.setCursor(2,0);
lcd.print("Ha Ha Ha Ha");
delay(1700);
lcd.clear();
}



Practical 6 - Interfacing Raspberry Pi with RFID.
#include <Keypad.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(5, 4, 3, 2, A4, A5);
struct student_detail{
  String name;
  String regno;
  int status;
};
student_detail student_registered[30];
void student_registered_database()
{
  student_registered[0]={"A0","18BLC0000",0};
  student_registered[1]={"A1","18BLC0001",0};
  student_registered[2]={"A2","18BLC0002",0};
  student_registered[3]={"A3","18BLC0003",0};
  student_registered[4]={"A4","18BLC0004",0};
  student_registered[5]={"A5","18BLC0005",0};
  student_registered[6]={"A6","18BLC0006",0};
  student_registered[7]={"A7","18BLC0007",0};
  student_registered[8]={"A8","18BLC0008",0};
  student_registered[9]={"A9","18BLC0009",0};
  student_registered[10]={"A10","18BLC0010",0};
  student_registered[11]={"A11","18BLC0011",0};
  student_registered[12]={"A12","18BLC0012",0};
  student_registered[13]={"A13","18BLC0013",0};
  student_registered[14]={"A14","18BLC0014",0};
  student_registered[15]={"A15","18BLC0015",0};
  student_registered[16]={"A16","18BLC0016",0};
  student_registered[17]={"A17","18BLC0017",0};
  student_registered[18]={"A18","18BLC0018",0};
  student_registered[19]={"A19","18BLC0019",0};
  student_registered[20]={"A20","18BLC0020",0};
  student_registered[21]={"A21","18BLC0021",0};
  student_registered[22]={"A22","18BLC0022",0};
  student_registered[23]={"A23","18BLC0023",0};
  student_registered[24]={"A24","18BLC0024",0};
  student_registered[25]={"A25","18BLC0025",0};
  student_registered[26]={"A26","18BLC0026",0};
  student_registered[27]={"A27","18BLC0027",0};
  student_registered[28]={"A28","18BLC0028",0};
  student_registered[29]={"A29","18BLC0029",0};
}
int find(String regno){
  int status=-1;
  for(int i=0;i<20;i++)
  {
    if(regno==student_registered[i].regno)
    {
      status=i;
    }
  }
  return status;
}
void setup(){
   Serial.begin(9600);
   lcd.begin(16, 2);
   lcd.setCursor(0,0);
  student_registered_database();
}
void loop()
{
  int status=-1;
  if(Serial.available()>0)
  {
    String reg_no=Serial.readString();
    status=find(reg_no);
    if(status>=0 && status<=29)
    {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(student_registered[status].name);
      lcd.setCursor(0,1);
      lcd.print(student_registered[status].regno);
      delay(5000);
      student_registered[status].status=1;
    }
    else{
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("not found");
      delay(5000);
    }
  }
  else{
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Give your regno");
    delay(5000);
  }
}


Practical 7 â€“  Traffic Signal 
int r1=1;
int y1=2;
int g1=3;
int r2=4;
int y2=5;
int g2=6;
void setup() 
{
pinMode(r1,OUTPUT);
pinMode(y1,OUTPUT);
pinMode(g1,OUTPUT);
pinMode(r2,OUTPUT);
pinMode(y2,OUTPUT);
pinMode(g2,OUTPUT);
}

void loop() 
{
digitalWrite(g1,HIGH);
digitalWrite(r2,HIGH);
delay(10000);
digitalWrite(r1,LOW);
digitalWrite(y1,LOW);
digitalWrite(y2,LOW);
digitalWrite(g2,LOW);

digitalWrite(g1,LOW);  
digitalWrite(y1,HIGH);
digitalWrite(y2,HIGH);
delay(5000);
digitalWrite(y1,LOW);
digitalWrite(y2,LOW);
digitalWrite(r1,LOW);
digitalWrite(r2,LOW);
digitalWrite(g2,LOW);

digitalWrite(r1,HIGH);
digitalWrite(g2,HIGH);
delay(10000);
digitalWrite(r1,LOW);
digitalWrite(g2,LOW);
digitalWrite(y1,LOW);
digitalWrite(g1,LOW);
digitalWrite(r2,LOW);
digitalWrite(y2,LOW);
}

Practical 8 â€“ IoT based Web Controlled Home Automation using Raspberry Pi 
#include<Servo.h>
const int pingPin = 7;
int servoPin = 8;

Servo servo1;

void setup() {
  // initialize serial communication:
  Serial.begin(9600);
  servo1.attach(servoPin);
  pinMode(2,INPUT);
  pinMode(4,OUTPUT);
  pinMode(11,OUTPUT);
  pinMode(12,OUTPUT);
  pinMode(13,OUTPUT);
  pinMode(A0,INPUT);
  digitalWrite(2,LOW);
  digitalWrite(11,HIGH);
  
}

void loop() {
  
  long duration, inches, cm;

  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH pulse
  // whose duration is the time (in microseconds) from the sending of the ping
  // to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);

  //Serial.print(inches);
  //Serial.print("in, ");
  //Serial.print(cm);
  //Serial.print("cm");
  //Serial.println();
  //delay(100);
  
  servo1.write(0);
  
  if(cm < 40)
  {
    servo1.write(90);
    delay(2000);
  }
  else
  {
    servo1.write(0);
  }
  
  // PIR with LED starts
  int pir = digitalRead(2);
  
  if(pir == HIGH)
  {
    digitalWrite(4,HIGH);
    delay(1000);
  }
  else if(pir == LOW)
  {
    digitalWrite(4,LOW);
  }
  
  //temp with fan
  float value=analogRead(A0);
  float temperature=value*0.48;
  
  Serial.println("temperature");
  Serial.println(temperature);
  
  if(temperature > 20)
  {
    digitalWrite(12,HIGH);
    digitalWrite(13,LOW);
  }
  else
  {
    digitalWrite(12,LOW);
    digitalWrite(13,LOW);
  }
}

long microsecondsToInches(long microseconds) {
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds) {
  return microseconds / 29 / 2;
}

